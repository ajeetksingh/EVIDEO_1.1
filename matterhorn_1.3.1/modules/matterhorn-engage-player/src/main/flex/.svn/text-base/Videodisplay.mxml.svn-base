<?xml version="1.0" encoding="utf-8"?>

<!--
	 /**
	 *  Copyright 2009 The Regents of the University of California
	 *  Licensed under the Educational Community License, Version 2.0
	 *  (the "License"); you may not use this file except in compliance
	 *  with the License. You may obtain a copy of the License at
	 *
	 *  http://www.osedu.org/licenses/ECL-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing,
	 *  software distributed under the License is distributed on an "AS IS"
	 *  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
	 *  or implied. See the License for the specific language governing
	 *  permissions and limitations under the License.
	 *
	 */
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				width="100%"
				height="100%"
				layout="absolute"
				preinitialize="{ onPreinitialize(); }"
				applicationComplete="{ onApplicationComplete(event) }"
				addedToStage="onAddedToStage()"
				xmlns:view="org.opencast.engage.videodisplay.view.*"
				xmlns:br="bridge.*"
				currentState="{model.mediaState}"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				xmlns:business="org.opencast.engage.videodisplay.business.*"
				frameRate="30">

	<mx:Style source="style/Videodisplay.css"/>

	<mx:Script>
		<![CDATA[
			import flash.display.StageDisplayState;
			import mx.collections.ArrayCollection;
			import bridge.ExternalFunction;
			import org.opencast.engage.videodisplay.business.FlexAjaxBridge;
			import org.opencast.engage.videodisplay.business.VideodisplayBean;
			import org.opencast.engage.videodisplay.control.event.ClosedCaptionsEvent;
			import org.opencast.engage.videodisplay.control.event.LoadDFXPXMLEvent;
			import org.opencast.engage.videodisplay.control.event.SetCurrentCaptionsEvent;
			import org.opencast.engage.videodisplay.control.event.SetVolumeEvent;
			import org.opencast.engage.videodisplay.control.event.VideoControlEvent;
			import org.opencast.engage.videodisplay.control.util.TimeCode;
			import org.opencast.engage.videodisplay.model.VideodisplayModel;
			import org.opencast.engage.videodisplay.vo.CaptionSetVO;
			import org.osmf.layout.VerticalAlign;
			import org.swizframework.Swiz;

			[Autowire]
			[Bindable]
			public var model:VideodisplayModel;

			private var flexAjaxBridge:FlexAjaxBridge;

			/**
			 * getFlexAjaxBridge
			 * Get the Flex Ajax Bridge
			 * @return KeyboardEvent FlexAjaxBridge
			 */
			public function getFlexAjaxBridge():FlexAjaxBridge
			{
				return this.flexAjaxBridge;
			}

			/**
			 * fullScreenHandler
			 * Save the status of the fullscreen mode
			 * @eventType FullScreenEvent event
			 */
			private function fullScreenHandler(event:FullScreenEvent):void
			{
				if (event.fullScreen)
				{
					model.fullscreenMode=true;
					StyleManager.getStyleDeclaration("Application").setStyle('backgroundAlpha', '100');
					StyleManager.getStyleDeclaration("Application").setStyle('backgroundColor', 'Black');
				}
				else
				{
					model.fullscreenMode=false;
					model.multiMediaContainerLeft=model.multiMediaContainerLeftNormalscreen;
					model.multiMediaContainerRight=model.multiMediaContainerRightNormalscreen;
					model.multiMediaContainerBottom=0;
					StyleManager.getStyleDeclaration("Application").setStyle('backgroundAlpha', '0');
				}
			}

			/**
			 * onAddedToStage
			 * Add an event listener for the keyboard.
			 */
			private function onAddedToStage():void
			{
				flexAjaxBridge=new FlexAjaxBridge();
				stage.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
			}


			/**
			 * init
			 * initialization
			 *
			 * @eventType Event event
			 */
			private function onApplicationComplete(event:Event):void
			{
				/* Set up full screen handler. */
				Application.application.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				StyleManager.getStyleDeclaration("Application").setStyle('backgroundAlpha', '0');
			}

			/**
			 * onPreinitialize
			 * load Beans
			 */
			private function onPreinitialize():void
			{
				Swiz.getInstance().loadBeans([VideodisplayBean]);
				Swiz.autowire(this);
			}

			/**
			 * playPause
			 * Toggle between play and pause
			 */
			private function playPause():void
			{
				ExternalInterface.call(ExternalFunction.PLAYPAUSE, '');
			}

			/**
			 * reportKeyUp
			 * Keyboard Flex Bridge Listener
			 * @eventType KeyboardEvent event
			 */
			private function reportKeyUp(event:KeyboardEvent):void
			{
				flexAjaxBridge.reportKeyUp(event);
			}
		]]>
	</mx:Script>

	<mx:states>

		<mx:State name="media">

			<mx:SetProperty target="{ bx_media }"
							name="visible"
							value="true"/>

			<mx:SetProperty target="{ bx_media }"
							name="includeInLayout"
							value="true"/>
		</mx:State>

		<mx:State name="audio">

			<mx:SetProperty target="{ bx_audio }"
							name="visible"
							value="true"/>

			<mx:SetProperty target="{ bx_audio }"
							name="includeInLayout"
							value="true"/>
		</mx:State>

		<mx:State name="error">

			<mx:SetProperty target="{ bx_error }"
							name="visible"
							value="true"/>

			<mx:SetProperty target="{ bx_error }"
							name="includeInLayout"
							value="true"/>
		</mx:State>
	</mx:states>

	<br:FABridge/>

	<view:AudioView id="bx_audio"
					visible="false"
					includeInLayout="false"
					click="{ playPause() }"/>

	<view:MediaView id="bx_media"
					visible="false"
					includeInLayout="false"
					currentState="{ model.videoState }"/>

	<view:ErrorView id="bx_error"
					visible="false"
					includeInLayout="false"/>
	<!--<mx:Style source="Icon_set.css"/>-->


</mx:Application>
