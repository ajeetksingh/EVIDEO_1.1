Writing a REST-ful Service
1) Annotate a Java class with JAX-RS annotations.
2) Register this Java class as an OSGI service, using:
	- The class name as the service interface
	- The property opencast.rest.service=true
For example:
    Dictionary<String, String> props = new Hashtable<String, String>();
    props.put("opencast.rest.service", Boolean.TRUE.toString());
    context.registerService(MyRestService.class.getName(), new MyRestService(), props);
Or via Declarative Services:
    <?xml version="1.0" encoding="UTF-8"?>
    <component name="sample-rest" immediate="true">
      <implementation class="org.opencastproject.myservice.MyRestService" />
      <property name="service.description" value="My Rest Service" />
      <property name="opencast.rest.service" value="true" />
      <service>
        <provide interface="org.opencastproject.myservice.MyRestService" />
       </service>
      <reference ...
    </component>

3) Display restructured text documentation for GET requests to the top-level path.  For example:

@Path("/sample")
public class MyRestService {
  @GET
  @Produces(MediaType.TEXT_PLAIN)
  public String getDocumentation() {
    return "This is the documentation for my service, expressed as restructured text.";
  }

  @GET
  @Path("/resource/{id}")
  @Produces(MediaType.TEXT_HTML)
  public String getResource(PathParam("id") String id) {...}

  ...
}

